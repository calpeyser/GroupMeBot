"""
generate_sentence.py

Exposes a function that can generate posts in the style of a groupme post.
"""

import csv
import markovify
import re

AUTHOR_INDEX = 2
POST_INDEX = 3

def generate_post(author, corpus):
	"""
	Generates a post in the style of the given author, using a markov model generated
	from the given corpus.  The corpus is expected to be a .csv file generated by 
	youyanggu/groupme_stats.
	"""
	
	authored_corpus = "\n".join(get_authored_posts(author, corpus))
	model = NewlineText(authored_corpus)
	return model.make_sentence()

def get_authors(corpus):
	"""
	Returns a list of the authors that occur in the corpus.
	"""
	reader = csv.reader(corpus, delimiter=",")

	out = []
	for row in reader:
		if row[AUTHOR_INDEX] not in out:
			out.append(row[AUTHOR_INDEX])
	return out

def get_authored_posts(author, corpus):
	"""
	Reads the corpus and returns a filtered list of posts by the provided author.
	"""
	reader = csv.reader(corpus, delimiter=",")
	return [row[POST_INDEX] for row in reader if row[AUTHOR_INDEX] == author]

class NewlineText(markovify.Text):
    """
    A (usable) example of subclassing markovify.Text. This one lets you markovify
    text where the sentences are separated by newlines instead of ". "

    Copied from head at markovify/markovify/text.py, as this class is not in the
    latest markovify release.
    """
    def sentence_split(self, text):
        return re.split(r"\s*\n\s*", text)

if __name__ == "__main__":
	corpus = open("groupme_stats/temp.csv", "rb")
	print get_authors(corpus)
	corpus = open("groupme_stats/temp.csv", "rb")
	print generate_post("Bridge Troll", corpus)